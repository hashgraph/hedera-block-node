# SPDX-License-Identifier: Apache-2.0
name: "ZXC: Verify Docker Build Determinism"
# Here, the ZXC prefix:
# Z - Ensures sort order such that this script appears at the bottom of the UI
# X - Indicates it's not for direct user consumption
# C - Indicates this is a 'workflow_call' based reusable workflow
on:
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag, or commit to checkout:"
        type: string
        required: false
        default: ""
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.5"

  workflow_dispatch:
    inputs:
      ref:
        description: "The branch, tag, or commit to checkout:"
        type: string
        required: false
        default: ""
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "21.0.5"

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read
  packages: write

env:
  DOCKER_MANIFEST_GENERATOR: .github/workflows/support/scripts/generate-docker-artifact-baseline.sh
  DOCKER_MANIFEST_PATH: ${{ github.workspace }}/.manifests/docker
  DOCKER_REGISTRY: localhost:5000
  DOCKER_IMAGE_NAME: hashgraph/hedera-block-node
  DOCKER_CONTEXT_PATH: server/docker
  SKOPEO_VERSION: v1.14.0
  OWNER: hashgraph

jobs:
  generate-baseline:
    name: Generate Baseline
    runs-on: block-node-linux-medium
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
      sha-abbrev: ${{ steps.commit.outputs.sha-abbrev }}
      source-date: ${{ steps.commit.outputs.source-date }}
      path: ${{ steps.baseline.outputs.path }}
      file: ${{ steps.baseline.outputs.file }}
      name: ${{ steps.baseline.outputs.name }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Standardize Git Line Endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2

      - name: Retrieve Commit Hash
        id: commit
        run: |
          echo "sha=$(git rev-parse HEAD)" >> "${GITHUB_OUTPUT}"
          echo "sha-abbrev=$(git rev-parse HEAD | tr -d '[:space:]' | cut -c1-8)" >> "${GITHUB_OUTPUT}"
          echo "source-date=$(git log -1 --pretty=%ct)" >> "${GITHUB_OUTPUT}"

      - name: Baseline Existence Check
        id: baseline
        run: |
          BASELINE_NAME="${{ steps.commit.outputs.sha }}.tar.gz"
          BASELINE_PATH="gs://hedera-ci-ephemeral-artifacts/${{ github.repository }}/docker/baselines"
          BASELINE_FILE="${BASELINE_PATH}/${BASELINE_NAME}"
          BASELINE_EXISTS="false"

          if gsutil ls "${BASELINE_FILE}" >/dev/null 2>&1; then
             BASELINE_EXISTS="false"
          fi

          echo "exists=${BASELINE_EXISTS}" >> "${GITHUB_OUTPUT}"
          echo "path=${BASELINE_PATH}" >> "${GITHUB_OUTPUT}"
          echo "name=${BASELINE_NAME}" >> "${GITHUB_OUTPUT}"
          echo "file=${BASELINE_FILE}" >> "${GITHUB_OUTPUT}"

      - name: Setup Java
        uses: actions/setup-java@7a6d8a8234af8eb26422e24e3006232cccaa061b # v4.6.0
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # v4.2.2
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          cache-disabled: true

      - name: Install Skopeo and JQ
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends skopeo jq

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          version: v0.16.2
          driver-opts: network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://hub.mirror.docker.lat.ope.eng.hashgraph.io"]

      - name: Setup Local Docker Registry
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Show Docker Version
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: docker version

      - name: Show Docker Info
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: docker info

      - name: Build Gradle Artifacts
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: ./gradlew assemble

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build Docker Image
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6.12.0
        env:
          SOURCE_DATE_EPOCH: ${{ steps.commit.outputs.source-date }}
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        with:
          push: true
          no-cache: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            SOURCE_DATE_EPOCH=${{ steps.commit.outputs.source-date }}
            VERSION=${{ env.VERSION }}
          context: ./${{ env.DOCKER_CONTEXT_PATH }}
          file: ./${{ env.DOCKER_CONTEXT_PATH }}/Dockerfile
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.commit.outputs.sha-abbrev }}
          build-contexts: |
            distributions=./server/build/distributions

      - name: Generate Manifest
        id: manifest
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: GITHUB_SHA="${{ steps.commit.outputs.sha }}" ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Amend Manifest with Gradle Artifacts
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        working-directory: ${{ env.DOCKER_MANIFEST_PATH }}
        run: |
          EXTRACTED_FILE_NAME="${{ steps.commit.outputs.sha }}.tar"
          gunzip "${{ steps.manifest.outputs.name }}"
          tar -rvf "${EXTRACTED_FILE_NAME}" -C "${{ github.workspace }}/${{ env.DOCKER_CONTEXT_PATH }}" ../../server/build/
          gzip "${EXTRACTED_FILE_NAME}"

      - name: Upload Baseline
        if: ${{ steps.baseline.outputs.exists == 'false' && !failure() && !cancelled() }}
        run: gsutil cp "${{ steps.manifest.outputs.file }}" "${{ steps.baseline.outputs.file }}"

  verify-artifacts:
    name: "Verify Artifacts (${{ join(matrix.os, ', ') }})"
    runs-on: ${{ matrix.os }}
    needs:
      - generate-baseline
    strategy:
      fail-fast: false
      matrix:
        os:
          - block-node-linux-medium
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Standardize Git Line Endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.ref }}

      - name: Setup Python
        uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: 3.9

      - name: Install JQ (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends jq

      - name: Install Skopeo (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          source /etc/os-release
          if [[ "${VERSION_ID}" != "20.04" ]]; then
            sudo apt-get install --yes --no-install-recommends skopeo
          fi

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
        with:
          workload_identity_provider: "projects/235822363393/locations/global/workloadIdentityPools/hedera-builds-pool/providers/hedera-builds-gh-actions"
          service_account: "swirlds-automation@hedera-registry.iam.gserviceaccount.com"

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2
        env:
          CLOUDSDK_PYTHON: ${{ format('{0}{1}', env.pythonLocation, runner.os == 'Windows' && '\python.exe' || '/bin/python3') }}

      - name: Download Baseline
        env:
          CLOUDSDK_PYTHON: ${{ format('{0}{1}', env.pythonLocation, runner.os == 'Windows' && '\python.exe' || '/bin/python3') }}
        run: |
          echo "Creating build directory: ./server/build/distributions"
          mkdir -p ./server/build/distributions

          mkdir -p "${{ env.DOCKER_MANIFEST_PATH }}"
          cd "${{ env.DOCKER_MANIFEST_PATH }}"
          gsutil cp "${{ needs.generate-baseline.outputs.file }}" .
          tar -xzf "${{ needs.generate-baseline.outputs.name }}"
          cd ./server/build/distributions
          cp *.tar "${{ github.workspace }}/server/build/distributions/"
          echo "Copied Block Node server tar file to ${{ github.workspace }}/server/build/distributions/"

      - name: Determine Home Directory
        id: home
        run: echo "directory=$(tr -d '[:space:]' < <(cd ~ && pwd))" >> "${GITHUB_OUTPUT}"

      - name: Setup QEmu Support
        uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0

      - name: Setup Docker Buildx Support
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0
        with:
          version: v0.16.2
          driver-opts: network=host
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["https://hub.mirror.docker.lat.ope.eng.hashgraph.io"]

      - name: Setup Local Docker Registry
        run: docker run -d -p 5000:5000 --restart=always --name registry registry:latest

      - name: Show Docker Version
        run: docker version

      - name: Show Docker Info
        run: docker info

      - name: Extract version
        id: extract_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Build Docker Image
        uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # v6.12.0
        env:
          SOURCE_DATE_EPOCH: ${{ needs.generate-baseline.outputs.source-date }}
        with:
          push: true
          no-cache: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            SOURCE_DATE_EPOCH=${{ needs.generate-baseline.outputs.source-date }}
            VERSION=${{ env.VERSION }}
          context: ./${{ env.DOCKER_CONTEXT_PATH }}
          file: ./${{ env.DOCKER_CONTEXT_PATH }}/Dockerfile
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.generate-baseline.outputs.sha-abbrev }}
          build-contexts: |
            distributions=./server/build/distributions

      - name: Regenerate Manifest
        id: regen-manifest
        env:
          MANIFEST_PATH: ${{ env.DOCKER_MANIFEST_PATH }}/regenerated
        run: GITHUB_SHA="${{ needs.generate-baseline.outputs.sha }}" ${{ env.DOCKER_MANIFEST_GENERATOR }}

      - name: Validate Layers (linux/amd64)
        run: |
          if ! diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-amd64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-amd64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Layers (linux/arm64)
        run: |
          if ! diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-arm64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.layers.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-arm64.layers.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.layers.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/amd64)
        run: |
          if ! diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-amd64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-amd64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-amd64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Validate Full Manifest (linux/arm64)
        run: |
          if ! diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-arm64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.comparable.json" >/dev/null 2>&1; then
           echo "::group::Layer Differences"
           diff -u "${{ env.DOCKER_MANIFEST_PATH }}/linux-arm64.comparable.json" "${{ steps.regen-manifest.outputs.path }}/linux-arm64.comparable.json"
           echo "::endgroup::"
           exit 1
          fi

      - name: Publish Manifests
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        if: ${{ steps.regen-manifest.conclusion == 'success' && failure() && !cancelled() }}
        with:
          name: Docker Manifests [${{ join(matrix.os, ', ') }}]
          path: ${{ env.DOCKER_MANIFEST_PATH }}/**
