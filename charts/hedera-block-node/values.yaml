# Default values for hedera-block-node.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: ghcr.io/hashgraph/hedera-block-node
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

blockNode:
  # if blank will use same as AppVersion of chart.
  version: ""
  config:
    # Add any additional env configuration here
    # key: value
    BLOCKNODE_STORAGE_ROOT_PATH: "/app/storage"
    JAVA_TOOL_OPTIONS: "-Djava.util.logging.config.file=/app/logs/config/logging.properties -Duser.timezone=UTC"
  secret:
    # if blank will use same as AppVersion of chart.
    PRIVATE_KEY: "fake_private_key"
  health:
    readiness:
      endpoint: "/healthz/readyz"
    liveness:
      endpoint: "/healthz/livez"
    metrics:
      port: 9999
  resources:
    limits:
      cpu: "8"
      memory: "16Gi"
    requests:
      cpu: "2"
      memory: "8Gi"
  logs:
    # Available Levels are (from most verbose to least verbose):
    # ALL FINEST FINER FINE CONFIG INFO WARNING SEVERE OFF
    level: "INFO"
    ################################################################################
    # SimpleFormatter single-line format configuration
    ################################################################################
    # The format syntax uses java.util.Formatter.
    # The parameters are:
    #   %1$ - date/time (java.util.Date)
    #   %2$ - source (usually class and method)
    #   %3$ - logger?s name
    #   %4$ - log level
    #   %5$ - log message
    #   %6$ - throwable trace
    #
    # Example to produce a line such as:
    # 2025-01-04 00:34:43 INFO [com.hedera.block.server.Server main] Starting BlockNode Server
    #
    format: "%1$tF %1$tT %4$-7s [%2$s] %5$s %n"
    loggingProperties:
      # Add any additional logging configuration properties here
      - name: "io.helidon.webserver.level"
        value: "INFO"
      - name: "io.helidon.config.level"
        value: "SEVERE"
      - name: "io.helidon.security.level"
        value: "INFO"
      - name: "io.helidon.common.level"
        value: "INFO"
      - name: "handlers"
        value: "java.util.logging.ConsoleHandler, java.util.logging.FileHandler"
      - name: "java.util.logging.ConsoleHandler.level"
        value: "FINE"
      - name: "java.util.logging.ConsoleHandler.formatter"
        value: "java.util.logging.SimpleFormatter"
      - name: "java.util.logging.FileHandler.pattern"
        value: "/app/logs/blocknode-%g.log"
      - name: "java.util.logging.FileHandler.append"
        value: "true"
      - name: "java.util.logging.FileHandler.limit"
        value: "5000000"
      - name: "java.util.logging.FileHandler.count"
        value: "5"
      - name: "java.util.logging.FileHandler.level"
        value: "FINE"
      - name: "java.util.logging.FileHandler.formatter"
        value: "java.util.logging.SimpleFormatter"

kubepromstack:
  enabled: false
  prometheusOperator:
    namespaces:
      releaseNamespace: true
  grafana:
    replicas: 1
    enabled: true
    defaultDashboardsEnabled: false
    adminPassword: "admin"
    datasources:
      datasources.yaml: {}
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        provider:
          allowUiUpdates: true
      datasources:
        enabled: true
        label: grafana_datasource

  nodeExporter:
    enabled: true
