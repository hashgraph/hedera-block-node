syntax = "proto3";

/*-
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.block.protos";
option java_outer_classname = "BlockStreamServiceGrpcProto";

/**
  * The BlockStreamGrpc service definition provides 2 bidirectional streaming methods for
  * exchanging blocks with the Block Node server.
  *
  * A producer (e.g. Consensus Node) can use the StreamSink method to stream blocks to the
  * Block Node server.  The Block Node server will respond with a BlockResponse message for
  * each block received.
  *
  * A consumer (e.g. Mirror Node) can use the StreamSource method to request a stream of
  * blocks from the server.  The consumer is expected to respond with a BlockResponse message
  * with the id of each block received.
 */
service BlockStreamGrpc {

    /**
     * StreamSink is a bidirectional streaming method that allows a producer to stream blocks
     * to the Block Node server.  The server will respond with a BlockResponse message for each
     * block received.
     */
    rpc StreamSink(stream Block) returns (stream BlockResponse) {}

    /**
     * StreamSource is a bidirectional streaming method that allows a consumer to request a
     * stream of blocks from the server.  The consumer is expected to respond with a BlockResponse
     * message with the id of each block received.
     */
    rpc StreamSource(stream BlockResponse) returns (stream Block) {}
}

/**
 * A block is a simple message that contains an id and a value.
 * This specification is a simple example meant to expedite development.
 * It will be replaced with a PBJ implementation in the future.
 */
message Block {
    /**
     * The id of the block.  Each block id should be unique.
     */
    int64 id = 1;

    /**
     * The value of the block.  The value can be any string.
     */
    string value = 2;
}

/**
 * A block response is a simple message that contains an id.
 * The block response message is simply meant to disambiguate it
 * from the original request. This specification is a simple
 * example meant to expedite development. It will be replaced with
 * a PBJ implementation in the future.
 */
message BlockResponse {
    /**
     * The id of the block which was received.  Each block id should
     * correlate with the id of a Block message id.
     */
    int64 id = 1;
}
