syntax = "proto3";

/*-
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.block.protos";
option java_outer_classname = "BlockStreamService";

service BlockStreamGrpcService {

    rpc publishBlockStream (stream PublishStreamRequest) returns (stream PublishStreamResponse) {}

    rpc subscribeBlockStream (SubscribeStreamRequest) returns (stream SubscribeStreamResponse) {}

    rpc singleBlock(SingleBlockRequest) returns (SingleBlockResponse) {}
}

message PublishStreamRequest {
    BlockItem block_item = 1;
}

message PublishStreamResponse {
    oneof response {
        /**
         * A response sent for each item and for each block.
         */
        ItemAcknowledgement acknowledgement = 1;

        /**
         * A response sent when a stream ends.
         */
        EndOfStream status = 2;
    }

    message ItemAcknowledgement {
        bytes item_ack = 1;
    }

    message EndOfStream {
        PublishStreamResponseCode status = 1;
    }

    /**
    * An enumeration indicating the status of this request.
    *
    * This enumeration describes the reason a block stream
    * (sent via `writeBlockStream`) ended.
    */
    enum PublishStreamResponseCode {
        /**
         * An "unset value" flag, this value SHALL NOT be used.<br/>
         * This status indicates the server software failed to set a
         * status, and SHALL be considered a software defect.
         */
        STREAM_ITEMS_UNKNOWN = 0;

        /**
         * The request succeeded.<br/>
         * No errors occurred and the source node orderly ended the stream.
         */
        STREAM_ITEMS_SUCCESS = 1;

        /**
         * The delay between items was too long.<br/>
         * The source MUST start a new stream before the failed block.
         */
        STREAM_ITEMS_TIMEOUT = 2;

        /**
         * An item was received out-of-order.<br/>
         * The source MUST start a new stream before the failed block.
         */
        STREAM_ITEMS_OUT_OF_ORDER = 3;

        /**
         * A block state proof item could not be validated.<br/>
         * The source MUST start a new stream before the failed block.
         */
        STREAM_ITEMS_BAD_STATE_PROOF = 4;
    }
}

message SubscribeStreamRequest {
    uint64 start_block_number = 1;
}

message SubscribeStreamResponse {
    oneof response {
        SubscribeStreamResponseCode status = 1;
        BlockItem block_item = 2;
    }

    enum SubscribeStreamResponseCode {
        READ_STREAM_UNKNOWN = 0;
        READ_STREAM_INSUFFICIENT_BALANCE = 1;
        READ_STREAM_SUCCESS = 2;
        READ_STREAM_INVALID_START_BLOCK_NUMBER = 3;
        READ_STREAM_INVALID_END_BLOCK_NUMBER = 4;
    }
}



message Block {
    repeated BlockItem block_items = 1;
}

/**
 * A BlockItem is a simple message that contains an id and a value.
 * This specification is a simple example meant to expedite development.
 * It will be replaced with a PBJ implementation in the future.
 */
message BlockItem {

    oneof items {
        BlockHeader header = 1;
        EventMetadata start_event = 2;
        BlockProof state_proof = 3;
    }

    string value = 4;
}

message BlockHeader {
    uint64 block_number = 1;
}

message EventMetadata {
    uint64 creator_id = 1;
}

message BlockProof {
    uint64 block = 1;
}

message SingleBlockRequest {
    uint64 block_number = 1;
}

message SingleBlockResponse {
    oneof response {
        SingleBlockResponseCode status = 1;
        Block block = 2;
    }

    enum SingleBlockResponseCode {
        READ_BLOCK_UNKNOWN = 0;
        READ_BLOCK_INSUFFICIENT_BALANCE = 1;
        READ_BLOCK_SUCCESS = 2;
        READ_BLOCK_NOT_FOUND = 3;
        READ_BLOCK_NOT_AVAILABLE = 4;
    }
}
